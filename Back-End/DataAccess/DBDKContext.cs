// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DataAccess.Entities;
using DataAccess.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using StaticClass;
using System;
using System.IO;
using System.Linq.Expressions;
#nullable disable

namespace DataAccess
{
    public partial class DBDKContext : DBDKContextDefault
    {
        public DBDKContext()
        {
        }

        public DBDKContext(DbContextOptions<DBDKContextDefault> options)
            : base(options)
        {
        }

        public virtual void SetUsersInRoles()
        {
            this.Database.ExecuteSqlRaw("EXEC [dbo].[SetUsersInRoles]");
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                IConfigurationRoot configuration = new ConfigurationBuilder()
                   .SetBasePath(Directory.GetCurrentDirectory())
                   .AddJsonFile("appsettings.json")
                   .Build();
                var connectionString = configuration.GetConnectionString("DefaultConnection");
                optionsBuilder.UseSqlServer(connectionString).LogTo(Console.WriteLine, Microsoft.Extensions.Logging.LogLevel.Information);
                optionsBuilder.UseLazyLoadingProxies();
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.EntitiesOfType<ISoftDeleteAudit>(builder =>
            {
                builder.Property<DateTime?>(nameof(ISoftDeleteAudit.FechaBaja)).HasDefaultValue(null);

                // query filters :)
                var param = Expression.Parameter(builder.Metadata.ClrType, "p");
                var body = Expression.Equal(Expression.Property(param, nameof(ISoftDeleteAudit.FechaBaja)), Expression.Constant(null));
                builder.HasQueryFilter(Expression.Lambda(body, param));
            });

            base.OnModelCreating(modelBuilder);
        
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);


        public override int SaveChanges()
        {
            UpdateSoftDeleteStatuses();
            return base.SaveChanges();
        }

        private void UpdateSoftDeleteStatuses()
        {
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is IEntityAuditCreated || entry.Entity is IEntityAuditModified)
                {
                    switch (entry.State)
                    {
                        case EntityState.Added:
                            entry.CurrentValues[nameof(IEntityAudit.UsuarioCreacion)] = "129CA9E1-FD71-4E63-996C-B0364DB3B984";
                            entry.CurrentValues[nameof(IEntityAudit.FechaCreacion)] = DateTime.Now;

                            if(entry.Entity is IEntityAuditModified) {
                                entry.CurrentValues[nameof(IEntityAudit.UsuarioUltimaModificacion)] = "129CA9E1-FD71-4E63-996C-B0364DB3B984";
                                entry.CurrentValues[nameof(IEntityAudit.FechaUltimaModificacion)] = DateTime.Now;
                            }

                            break;
                        case EntityState.Modified:
                            entry.CurrentValues[nameof(IEntityAudit.UsuarioUltimaModificacion)] = "129CA9E1-FD71-4E63-996C-B0364DB3B984";
                            entry.CurrentValues[nameof(IEntityAudit.FechaUltimaModificacion)] = DateTime.Now;

                            break;
                        default:
                            break;
                    }
                }

                if (entry.State == EntityState.Deleted) {
                    if (entry.Entity is ISoftDeleteAudit)
                    {
                        entry.State = EntityState.Modified;
                        entry.CurrentValues[nameof(ISoftDeleteAudit.FechaBaja)] = DateTime.Now;
                        entry.CurrentValues[nameof(ISoftDeleteAudit.IdEstado)] =(int)Constants.EstadosABMS.BAJA;
                    }
                    if (entry.Entity is ISoftComplexDeleteAudit)
                    {
                        entry.State = EntityState.Modified;
                        entry.CurrentValues[nameof(ISoftComplexDeleteAudit.FechaUltimaModificacion)] = DateTime.Now;
                        entry.CurrentValues[nameof(ISoftComplexDeleteAudit.IdEstado)] = (int)Constants.EstadosPROVCLI.INACTIVO;
                    }
                }
            }
        }
    }
}